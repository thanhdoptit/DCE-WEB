import db from '../models/index.js';
const { WorkShift, UserShift, User } = db;
import { Op } from 'sequelize';

// Ch·ªçn ca l√†m vi·ªác
export const selectShift = async (req, res) => {
    const { shiftCode } = req.body;
    const userId = req.user.id;
  
    try {
      const today = new Date().toISOString().split('T')[0];
  
      // üîç T√¨m c√°c ca tr·ª±c h√¥m nay
      const todayShifts = await WorkShift.findAll({
        where: { date: today },
        attributes: ['id']
      });
      const shiftIds = todayShifts.map(s => s.id);
  
      // üîç Ki·ªÉm tra user ƒë√£ ƒë∆∞·ª£c g√°n ca h√¥m nay ch∆∞a
      const userShiftToday = await UserShift.findOne({
        where: {
          userId,
          workShiftId: shiftIds
        }
      });
  
      if (userShiftToday) {
        return res.status(400).json({ message: 'B·∫°n ƒë√£ c√≥ ca h√¥m nay. H√£y d√πng ch·ª©c nƒÉng thay ƒë·ªïi ca.' });
      }
  
      // üîç T√¨m ca t∆∞∆°ng ·ª©ng v·ªõi m√£ ca v√† ng√†y h√¥m nay
      let shift = await WorkShift.findOne({
        where: { code: shiftCode, date: today }
      });
  
      if (shift) {
        if (shift.status === 'done') {
          return res.status(400).json({ message: 'Ca n√†y ƒë√£ k·∫øt th√∫c.' });
        }
  
        // ‚úÖ Ca t·ªìn t·∫°i v√† ch∆∞a done ‚Üí g√°n user
        await UserShift.create({ userId, workShiftId: shift.id });
      } else {
        // ‚úÖ Ca ch∆∞a t·ªìn t·∫°i ‚Üí t·∫°o m·ªõi
        shift = await WorkShift.create({
          code: shiftCode,
          date: today,
          status: 'doing',
          createdBy: userId
        });
  
        await UserShift.create({ userId, workShiftId: shift.id });
      }
  
      return res.json({ message: 'Ch·ªçn ca th√†nh c√¥ng', shift });
    } catch (err) {
      console.error('‚ùå selectShift error:', err);
      return res.status(500).json({ message: 'L·ªói server khi ch·ªçn ca' });
    }
  };
  
// Thay ƒë·ªïi ca
export const changeShift = async (req, res) => {
  const { shiftCode } = req.body;
  const userId = req.user.id;

  try {
    const today = new Date().toISOString().split('T')[0];

   // Xo√° ca c≈© c·ªßa user h√¥m nay
const todayShifts = await WorkShift.findAll({
    where: { date: today },
    attributes: ['id']
  });
  const shiftIds = todayShifts.map(s => s.id);
  
  await UserShift.destroy({
    where: {
      userId,
      workShiftId: shiftIds
    }
  });

    // T√¨m ho·∫∑c t·∫°o ca m·ªõi
    let shift = await WorkShift.findOne({
      where: { code: shiftCode, date: today }
    });

    if (!shift) {
      shift = await WorkShift.create({
        code: shiftCode,
        date: today,
        status: 'doing',
        createdBy: userId
      });
    }

    await UserShift.create({ userId, workShiftId: shift.id });

    res.json({ message: 'ƒê√£ chuy·ªÉn sang ca m·ªõi', shift });
  } catch (err) {
    console.error('‚ùå changeShift error:', err);
    res.status(500).json({ message: 'L·ªói server khi thay ƒë·ªïi ca' });
  }
};

// K·∫øt th√∫c ca l√†m vi·ªác
export const closeShift = async (req, res) => {
    const shiftId = req.params.id;
  
    try {
      const shift = await WorkShift.findByPk(shiftId);
      if (!shift) return res.status(404).json({ message: 'Ca kh√¥ng t·ªìn t·∫°i' });
  
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ca
      shift.status = 'done';
      await shift.save();
  
      // Xo√° to√†n b·ªô UserShift li√™n quan ƒë·∫øn ca n√†y (gi·∫£i ph√≥ng user)
      await UserShift.destroy({
        where: { workShiftId: shiftId }
      });
  
      res.json({ message: 'ƒê√£ k·∫øt th√∫c v√† gi·∫£i ph√≥ng ca tr·ª±c th√†nh c√¥ng', shift });
    } catch (err) {
      console.error('‚ùå closeShift error:', err);
      res.status(500).json({ message: 'L·ªói server khi ƒë√≥ng ca' });
    }
  };
  

// L·∫•y tr·∫°ng th√°i ca hi·ªán t·∫°i c·ªßa user
export const getCurrentShift = async (req, res) => {
    const userId = req.user.id;  // ph·∫£i l·∫•y t·ª´ token, kh√¥ng ph·∫£i req.params
    const today = new Date().toISOString().split('T')[0];
  
    try {
      const userShift = await UserShift.findOne({
        where: { userId },
        include: [{
          model: WorkShift,
          where: {
            date: today,
            status: {
              [Op.ne]: 'done'  // kh√¥ng l·∫•y ca ƒë√£ done
            }
          }
        }]
      });
  
      if (!userShift) {
        return res.status(404).json({ message: 'Ch∆∞a c√≥ ca l√†m vi·ªác h√¥m nay' });
      }
  
      res.json({ shift: userShift.WorkShift });
    } catch (err) {
      console.error('‚ùå getCurrentShift error:', err);
      res.status(500).json({ message: 'L·ªói server khi l·∫•y ca hi·ªán t·∫°i' });
    }
  };
  

export const getAllShifts = async (req, res) => {
    try {
      const shifts = await WorkShift.findAll({
        include: [
          {
            model: User,
            through: { attributes: [] },
            attributes: ['id', 'fullname', 'role']
          }
        ],
        order: [['date', 'DESC'], ['code', 'ASC']]
      });
  
      res.json(shifts);
    } catch (err) {
      console.error('‚ùå getAllShifts error:', err);
      res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch ca' });
    }
  };

  export const getTodayAvailableShifts = async (req, res) => {
    try {
      const today = new Date().toISOString().split('T')[0];
  
      const shifts = await WorkShift.findAll({
        where: { date: today },
        include: [
          {
            model: User,
            through: { attributes: [] },
            attributes: ['id']
          }
        ]
      });
  
      // Ch·ªâ l·∫•y c√°c ca ch∆∞a c√≥ ng∆∞·ªùi l√†m
      const available = shifts.filter(s => s.Users.length === 0);
      res.json(available);
    } catch (err) {
      console.error('‚ùå getTodayAvailableShifts error:', err);
      res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch ca c√≤n tr·ªëng h√¥m nay' });
    }
  };
  