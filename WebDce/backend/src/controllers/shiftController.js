import db from '../models/index.js';
const { WorkShift, UserShift, User } = db;
import { Op } from 'sequelize';

// Ch·ªçn ca l√†m vi·ªác
export const selectShift = async (req, res) => {
    const { shiftCode } = req.body;
    const userId = req.user.id;
  
    try {
      const today = new Date().toISOString().split('T')[0];
  
      // üîç T√¨m c√°c ca tr·ª±c h√¥m nay
      const todayShifts = await WorkShift.findAll({
        where: { date: today },
        attributes: ['id']
      });
      const shiftIds = todayShifts.map(s => s.id);
  
      // üîç Ki·ªÉm tra user ƒë√£ ƒë∆∞·ª£c g√°n ca h√¥m nay ch∆∞a
      const userShiftToday = await UserShift.findOne({
        where: {
          userId,
          workShiftId: shiftIds
        }
      });
  
      if (userShiftToday) {
        return res.status(400).json({ message: 'B·∫°n ƒë√£ c√≥ ca h√¥m nay. H√£y d√πng ch·ª©c nƒÉng thay ƒë·ªïi ca.' });
      }
  
      // L·∫•y th√¥ng tin user hi·ªán t·∫°i
      const currentUser = await User.findByPk(userId, {
        attributes: ['id', 'username', 'fullname']
      });
  
      // üîç T√¨m ca t∆∞∆°ng ·ª©ng v·ªõi m√£ ca v√† ng√†y h√¥m nay
      let shift = await WorkShift.findOne({
        where: { code: shiftCode, date: today },
        include: [{
          model: User,
          through: { attributes: [] },
          attributes: ['id', 'username', 'fullname']
        }]
      });
  
      if (shift) {
        if (shift.status === 'done') {
          return res.status(400).json({ message: 'Ca n√†y ƒë√£ k·∫øt th√∫c.' });
        }
  
        // ‚úÖ Ca t·ªìn t·∫°i v√† ch∆∞a done ‚Üí g√°n user
        await UserShift.create({ userId, workShiftId: shift.id });

        // Th√™m user v√†o danh s√°ch ƒë√£ l√†m vi·ªác
        const workedUsers = shift.workedUsers || [];
        if (!workedUsers.find(u => u.id === currentUser.id)) {
          workedUsers.push({
            id: currentUser.id,
            username: currentUser.username,
            fullname: currentUser.fullname
          });
          shift.workedUsers = workedUsers;
          await shift.save();
        }

        // Refresh shift data v·ªõi danh s√°ch user m·ªõi
        shift = await WorkShift.findOne({
          where: { id: shift.id },
          include: [{
            model: User,
            through: { attributes: [] },
            attributes: ['id', 'username', 'fullname']
          }]
        });
      } else {
        // ‚úÖ Ca ch∆∞a t·ªìn t·∫°i ‚Üí t·∫°o m·ªõi
        shift = await WorkShift.create({
          code: shiftCode,
          date: today,
          status: 'doing',
          createdBy: userId,
          workedUsers: [{
            id: currentUser.id,
            username: currentUser.username,
            fullname: currentUser.fullname
          }]
        });
  
        await UserShift.create({ userId, workShiftId: shift.id });

        // Refresh shift data v·ªõi user m·ªõi
        shift = await WorkShift.findOne({
          where: { id: shift.id },
          include: [{
            model: User,
            through: { attributes: [] },
            attributes: ['id', 'username', 'fullname']
          }]
        });
      }
  
      return res.json({ 
        message: shift.Users.length > 1 
          ? `Ch·ªçn ca th√†nh c√¥ng. Hi·ªán c√≥ ${shift.Users.length} ng∆∞·ªùi trong ca n√†y.`
          : 'Ch·ªçn ca th√†nh c√¥ng',
        shift 
      });
    } catch (err) {
      console.error('‚ùå selectShift error:', err);
      return res.status(500).json({ message: 'L·ªói server khi ch·ªçn ca' });
    }
  };
  
// Thay ƒë·ªïi ca
export const changeShift = async (req, res) => {
  const { shiftCode } = req.body;
  const userId = req.user.id;

  try {
    const today = new Date().toISOString().split('T')[0];

    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const currentUser = await User.findByPk(userId, {
      attributes: ['id', 'username', 'fullname']
    });

    // Xo√° ca c≈© c·ªßa user h√¥m nay
    const todayShifts = await WorkShift.findAll({
      where: { date: today },
      attributes: ['id']
    });
    const shiftIds = todayShifts.map(s => s.id);
    
    await UserShift.destroy({
      where: {
        userId,
        workShiftId: shiftIds
      }
    });

    // T√¨m ho·∫∑c t·∫°o ca m·ªõi
    let shift = await WorkShift.findOne({
      where: { code: shiftCode, date: today }
    });

    if (!shift) {
      shift = await WorkShift.create({
        code: shiftCode,
        date: today,
        status: 'doing',
        createdBy: userId,
        workedUsers: [{
          id: currentUser.id,
          username: currentUser.username,
          fullname: currentUser.fullname
        }]
      });
    } else {
      // Th√™m user v√†o danh s√°ch ƒë√£ l√†m vi·ªác c·ªßa ca m·ªõi
      const workedUsers = shift.workedUsers || [];
      if (!workedUsers.find(u => u.id === currentUser.id)) {
        workedUsers.push({
          id: currentUser.id,
          username: currentUser.username,
          fullname: currentUser.fullname
        });
        shift.workedUsers = workedUsers;
        await shift.save();
      }
    }

    await UserShift.create({ userId, workShiftId: shift.id });

    res.json({ message: 'ƒê√£ chuy·ªÉn sang ca m·ªõi', shift });
  } catch (err) {
    console.error('‚ùå changeShift error:', err);
    res.status(500).json({ message: 'L·ªói server khi thay ƒë·ªïi ca' });
  }
};

// K·∫øt th√∫c ca l√†m vi·ªác
export const closeShift = async (req, res) => {
    const shiftId = req.params.id;
  
    try {
      const shift = await WorkShift.findByPk(shiftId, {
        include: [{
          model: User,
          through: { attributes: [] },
          attributes: ['id', 'username', 'fullname']
        }]
      });

      if (!shift) return res.status(404).json({ message: 'Ca kh√¥ng t·ªìn t·∫°i' });
  
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ca
      shift.status = 'done';
      
      // Gi·ªØ l·∫°i danh s√°ch workedUsers c≈© v√† th√™m users hi·ªán t·∫°i n·∫øu ch∆∞a c√≥
      const workedUsers = [...(shift.workedUsers || [])];
      shift.Users.forEach(user => {
        if (!workedUsers.find(u => u.id === user.id)) {
          workedUsers.push({
            id: user.id,
            username: user.username,
            fullname: user.fullname
          });
        }
      });
      shift.workedUsers = workedUsers;
      await shift.save();
  
      // Xo√° to√†n b·ªô UserShift li√™n quan ƒë·∫øn ca n√†y (gi·∫£i ph√≥ng user)
      await UserShift.destroy({
        where: { workShiftId: shiftId }
      });

      // Refresh shift data ƒë·ªÉ l·∫•y th√¥ng tin m·ªõi nh·∫•t
      const updatedShift = await WorkShift.findByPk(shiftId);
  
      res.json({ 
        message: `ƒê√£ k·∫øt th√∫c ca tr·ª±c th√†nh c√¥ng. ${workedUsers.length} ng∆∞·ªùi ƒë√£ tham gia ca n√†y.`,
        shift: updatedShift 
      });
    } catch (err) {
      console.error('‚ùå closeShift error:', err);
      res.status(500).json({ message: 'L·ªói server khi ƒë√≥ng ca' });
    }
  };
  

// L·∫•y tr·∫°ng th√°i ca hi·ªán t·∫°i c·ªßa user
export const getCurrentShift = async (req, res) => {
    const userId = req.user.id;
    const today = new Date().toISOString().split('T')[0];
  
    try {
      const userShift = await UserShift.findOne({
        where: { userId },
        include: [{
          model: WorkShift,
          where: {
            date: today,
            status: {
              [Op.ne]: 'done'  // kh√¥ng l·∫•y ca ƒë√£ done
            }
          }
        }]
      });
  
      if (!userShift) {
        // Tr·∫£ v·ªÅ 200 v·ªõi shift: null thay v√¨ 404
        return res.status(200).json({ 
          shift: null,
          message: 'Ch∆∞a c√≥ ca l√†m vi·ªác h√¥m nay'
        });
      }
  
      res.json({ shift: userShift.WorkShift });
    } catch (err) {
      console.error('‚ùå getCurrentShift error:', err);
      res.status(500).json({ message: 'L·ªói server khi l·∫•y ca hi·ªán t·∫°i' });
    }
  };
  

export const getAllShifts = async (req, res) => {
    try {
      const shifts = await WorkShift.findAll({
        include: [
          {
            model: User,
            through: { attributes: [] },
            attributes: ['id', 'fullname', 'role']
          }
        ],
        order: [['date', 'DESC'], ['code', 'ASC']]
      });
  
      res.json(shifts);
    } catch (err) {
      console.error('‚ùå getAllShifts error:', err);
      res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch ca' });
    }
  };

  export const getTodayAvailableShifts = async (req, res) => {
    try {
      const today = new Date().toISOString().split('T')[0];
  
      const shifts = await WorkShift.findAll({
        where: { date: today },
        include: [
          {
            model: User,
            through: { attributes: [] },
            attributes: ['id']
          }
        ]
      });
  
      // Ch·ªâ l·∫•y c√°c ca ch∆∞a c√≥ ng∆∞·ªùi l√†m
      const available = shifts.filter(s => s.Users.length === 0);
      res.json(available);
    } catch (err) {
      console.error('‚ùå getTodayAvailableShifts error:', err);
      res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch ca c√≤n tr·ªëng h√¥m nay' });
    }
  };
  